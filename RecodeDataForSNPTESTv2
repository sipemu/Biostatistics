#
# Recode SNP-Data to the format for SNPTEST v2: https://mathgen.stats.ox.ac.uk/genetics_software/snptest/snptest.html
# File Format: http://www.stats.ox.ac.uk/~marchini/software/gwas/file_format.html
#
# Nur unter Linux oder MAC OS X ausfÃ¼hren
#
# Beispiel:
# 
#    estland <- readWorksheetFromFile("09_2012_IKP266_Estland/IKP166_Estland.xlsx", sheet="IKP166_candSNP", header=TRUE)
#    estland$GEB_DAT <- as.Date(estland$GEB_DAT)
#    estland$Eingabedatum <- as.Date(estland$Eingabedatum)
#    estland$Alter <- round((estland$Eingabedatum - estland$GEB_DAT) / 365, 2)
#    
#    # Umwandeln in Standardformat
#    estland[, 22:24][estland[, 22:24] == "-99.0"] <- NA
#    estland[, 26:30][estland[, 26:30] == "-99.0"] <- NA
#    tmp <- makeSNPs(estland[, 22:24], snpassoc=FALSE)
#    estland[, 22:24] <- tmp$data
#    tmp <- makeSNPs(estland[, 26:30], snpassoc=FALSE)
#    estland[, 26:30] <- tmp$data
#    
#    # Umwandlung Geschlecht
#    estland$Sex <- as.numeric(factor(estland$Sex))
#    
#    # Sample File
#    source("09_2012_IKP266_Estland/functions.R")
#    makeSNPTESTv2GenotypeFile(estland[, c(22:24, 26:30)], names(estland)[c(22:24, 26:30)], filename="estland.gen")
#    makeSNPTESTv2SampleFile(estland[, c(16, 18, 3)], kopf=c("cov1", "cov2", "pheno"), type=c("D", "D", "P"), filename="estland.sample")
#

# ./snptest_v2.4.1 -data ./09_2012_IKP266_Estland/estland.gen ./09_2012_IKP266_Estland/estland.sample -o ./09_2012_IKP266_Estland/estland.out -frequentist 1 -pheno pheno -cov_all -method score 


#' Erzeuge die Genotyp-Datei für SNPtestv2
#'
#' @Eingabe:
#'  @param SNPdata:	Matrix mit: Patienten in den Zeilen und SNP in Spalten
#'				Fehlende Werte als NA, SNPs als factor, beide SNPs muessen 
#'               vorhanden sein; Vorverarbeitung durch makeSNPs u.U. notwendig
#'
#'	@param SNPnamen:	rs-Bezeichnung der SNPs
#'
#'	@param SNPpos:		base-pair position, falls NULL pos wird 0000 eingefuegt
#'
#'	@param filename:	filename to save, falls NULL return der Matrix
#'
#'	@param parallel:	Parallel TRUE/FALSE, cluster muss VORHER eingerichtet werden, s.o. Boilerplate
#'
#' @Ausgabe:
#'	@param SNPTEST Genotype fileformat
#'
makeSNPTESTv2GenotypeFile <- function(SNPdata, SNPnamen, SNPpos=NULL, filename=NULL, parallel=FALSE) {
	
	library(stringr)
	library(plyr)
	
	m <- ncol(SNPdata)
	n <- nrow(SNPdata)
	erg <- c()
	for (j in 1:m) {
		# extrahiere SNP-Namen
		snp <- levels(SNPdata[, j])[2]
		snp1 <- str_sub(snp, 1, 1)
		snp2 <- str_sub(snp, 2, 2)
		rec <- matrix(c(snp1, snp2), 1, 2)
		
		# Faelle
		majhom <- paste(snp1, snp1, sep="")
		het <- paste(snp1, snp2, sep="")
 		minhom <- paste(snp2, snp2, sep="")
		
		SNPdata[, j] <- as.character(SNPdata[, j])
		ergi <- aaply(SNPdata[, j], 1, sortSNPTEST, majhom, het, minhom, .parallel=parallel) # umbauen nested loops
		ergi <- as.vector(t(ergi))
    ergi[ergi == "NA"] <- 0
		if (is.null(SNPpos)) {
			rec <- cbind(paste("SNP", j, sep=""), SNPnamen[j], "0000", rec, t(ergi))
		} else {
			rec <- cbind(paste("SNP", j, sep=""), SNPnamen[j], SNPpos[j], rec, t(ergi))
		}
		erg <- rbind(erg, rec)
	}
	if (is.null(filename)) {
		return(erg)
	} else {
		write.table(x=erg, file=filename, quote=FALSE, sep=" ", row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8")
	}
}

sortSNPTEST <- function(x, majhom, het, minhom) {
	tmp <- rep("0", 3)
	if(!is.na(x)) {
		if (x == majhom) {
			tmp[1] <- "1"	
		} else if (x == het) {
			tmp[2] <- "1"
		} else if (x == minhom) {
			tmp[3] <- "1"
		} 
	} else {
		tmp <- rep("NA", 3)
	}
	tmp
}


#' Erzeuge die Sample-Datei
#'
#' @Eingabe:
#'  @param SNPdata:	Matrix mit:Kovariate, abh. Variable in den Spalten
#'
#'	@param kopf:	    Bezeichnung der Variablen
#'
#'	@param SNPpos:		Type der Variable; auf Webseite nachschauen
#'
#'	@param filename:	filename to save, falls NULL return der Matrix
#'
#' @Ausgabe:
#'	@param SNPTEST Sample fileformat
makeSNPTESTv2SampleFile <- function(Data, kopf=c("cov1", "cov2", "pheno1", "bin1"), type=c("D", "C", "P", "B"), filename=NULL) {
  
	apply(Data, 2, function(x) {
						x <- as.character(x)
						x[which(is.na(x))] <- "NA"
						return(x)
			   })
	
	kopf <- c("ID_1", "ID_2", "missing", kopf)
	type <- c("0", "0", "0", type)
 	n <- nrow(Data)
	ID_1 <- ID_2 <- 1:n
	missing <- rep(0.0, n)
	erg <- cbind(ID_1, ID_2, missing, Data)
	erg <- rbind(kopf, type, erg)
	
	if (is.null(filename)) {
		return(erg)
	} else {
		write.table(x=erg, file=filename, quote=FALSE, sep=" ", row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8")
	}
}
