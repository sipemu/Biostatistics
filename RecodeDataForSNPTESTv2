# Recode SNP-Data to the format for SNPTEST v2: https://mathgen.stats.ox.ac.uk/genetics_software/snptest/snptest.html
# File Format: http://www.stats.ox.ac.uk/~marchini/software/gwas/file_format.html
#
# Nur unter Linux oder MAC OS X ausfÃÂ¼hren
#
# Beispiel:
# 
#    estland <- readWorksheetFromFile("09_2012_IKP266_Estland/IKP166_Estland.xlsx", sheet="IKP166_candSNP", header=TRUE)
#    estland$GEB_DAT <- as.Date(estland$GEB_DAT)
#    estland$Eingabedatum <- as.Date(estland$Eingabedatum)
#    estland$Alter <- round((estland$Eingabedatum - estland$GEB_DAT) / 365, 2)
#    
#    # Umwandeln in Standardformat
#    estland[, 22:24][estland[, 22:24] == "-99.0"] <- NA
#    estland[, 26:30][estland[, 26:30] == "-99.0"] <- NA
#    tmp <- makeSNPs(estland[, 22:24], snpassoc=FALSE)
#    estland[, 22:24] <- tmp$data
#    tmp <- makeSNPs(estland[, 26:30], snpassoc=FALSE)
#    estland[, 26:30] <- tmp$data
#    
#    # Umwandlung Geschlecht
#    estland$Sex <- as.numeric(factor(estland$Sex))
#    
#    # Sample File
#    source("09_2012_IKP266_Estland/functions.R")
#    makeSNPTESTv2GenotypeFile(estland[, c(22:24, 26:30)], names(estland)[c(22:24, 26:30)], filename="estland.gen")
#    makeSNPTESTv2SampleFile(estland[, c(16, 18, 3)], kopf=c("cov1", "cov2", "pheno"), type=c("D", "D", "P"), filename="estland.sample")
#

# ./snptest_v2.4.1 -data ./09_2012_IKP266_Estland/estland.gen ./09_2012_IKP266_Estland/estland.sample -o ./09_2012_IKP266_Estland/estland.out -frequentist 1 -pheno pheno -cov_all -method score 


#' Erzeuge die Genotyp-Datei fÃ¼r SNPtestv2
#'
#' @Eingabe:
#'	@param SNPdata:	Matrix mit: Patienten in den Zeilen und SNP in Spalten
#'				Fehlende Werte als NA, SNPs als factor, beide SNPs muessen 
#'               vorhanden sein; Vorverarbeitung durch makeSNPs u.U. notwendig
#'
#'	@param SNPnamen:	rs-Bezeichnung der SNPs
#'
#'	@param SNPpos:		base-pair position, falls NULL pos wird 0000 eingefuegt
#'
#'	@param filename:	filename to save, falls NULL return der Matrix
#'
#'	@param parallel:	Parallel TRUE/FALSE, cluster muss VORHER eingerichtet werden, s.o. Boilerplate
#'
#' @Ausgabe:
#'	@param SNPTEST Genotype fileformat
#'
makeSNPTESTv2GenotypeFile <- function(SNPdata, SNPnamen, SNPpos=NULL, filename=NULL, parallel=FALSE) {
	
	library(stringr)
	library(plyr)
	
	m <- ncol(SNPdata)
	n <- nrow(SNPdata)
	erg <- c()
	for (j in 1:m) {
		# extrahiere SNP-Namen
		snp <- levels(factor(SNPdata[, j]))[2]
		snp1 <- str_sub(snp, 1, 1)
		snp2 <- str_sub(snp, 2, 2)
		rec <- matrix(c(snp1, snp2), 1, 2)
		
		# Faelle
		majhom <- paste(snp1, snp1, sep="")
		het <- paste(snp1, snp2, sep="")
 		minhom <- paste(snp2, snp2, sep="")
		
		SNPdata[, j] <- as.character(SNPdata[, j])
		ergi <- aaply(SNPdata[, j], 1, sortSNPTEST, majhom, het, minhom, .parallel=parallel) # umbauen nested loops
		ergi <- as.vector(t(ergi))
    ergi[ergi == "NA"] <- 0
		if (is.null(SNPpos)) {
			rec <- cbind(paste("SNP", j, sep=""), SNPnamen[j], "0000", rec, t(ergi))
		} else {
			rec <- cbind(paste("SNP", j, sep=""), SNPnamen[j], SNPpos[j], rec, t(ergi))
		}
		erg <- rbind(erg, rec)
	}
	if (is.null(filename)) {
		return(erg)
	} else {
		write.table(x=erg, file=filename, quote=FALSE, sep=" ", row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8", eol="\n")
	}
}

sortSNPTEST <- function(x, majhom, het, minhom) {
	tmp <- rep("0", 3)
	if(!is.na(x)) {
		if (x == majhom) {
			tmp[1] <- "1"	
		} else if (x == het) {
			tmp[2] <- "1"
		} else if (x == minhom) {
			tmp[3] <- "1"
		} 
	} else {
		tmp <- rep("NA", 3)
	}
	tmp
}


#' Erzeuge die Sample-Datei
#'
#' @Eingabe:
#'  @param SNPdata:	Matrix mit:Kovariate, abh. Variable in den Spalten
#'
#'	@param kopf:	    Bezeichnung der Variablen
#'
#'	@param SNPpos:		Type der Variable; auf Webseite nachschauen
#'
#'	@param filename:	filename to save, falls NULL return der Matrix
#'
#' @Ausgabe:
#'	@param SNPTEST Sample fileformat
makeSNPTESTv2SampleFile <- function(Data, kopf=c("cov1", "cov2", "pheno1", "bin1"), type=c("D", "C", "P", "B"), filename=NULL) {
  
	apply(Data, 2, function(x) {
						x <- as.character(x)
						x[which(is.na(x))] <- "NA"
						return(x)
			   })
	
	kopf <- c("ID_1", "ID_2", "missing", kopf)
	type <- c("0", "0", "0", type)
 	n <- nrow(Data)
	ID_1 <- ID_2 <- 1:n
	missing <- rep(0.0, n)
	erg <- cbind(ID_1, ID_2, missing, Data)
	erg <- rbind(kopf, type, erg)
	
	if (is.null(filename)) {
		return(erg)
	} else {
		write.table(x=erg, file=filename, quote=FALSE, sep=" ", row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8", eol="\n")
	}
}

# names(data)
# [1] "id"            "rsid"          "pos"           "allele_A"      "allele_B"      "cohort_1_AA"  
# [7] "cohort_1_AB"   "cohort_1_BB"   "cohort_1_NULL" "add"           "dom"           "rec"          
# [13] "het"           "Chr"          
prepGenotypeDat <- function(data, infoPos=c(1:12, 19), pvalPos=c(13, 15, 17), betaPos=c(14, 16, 18), pvalMod=c("log-Additive", "Dominant", "Recessive"), filename="", sheetname="", n=NULL) {
  require(XLConnect)
  require(data.table)
  if (is.null(n)) {
    n <- nrow(data)
  }
  tmp <- data[, infoPos]
  pval <- data[, pvalPos]
  beta <- data[, betaPos]
  wmin <- unlist(apply(pval, 1, which.min))
  names(wmin) <- NULL
  pval <- cbind(pval, wmin)
  beta <- cbind(beta, wmin)
  getMin <- function(x) {
    n <- length(x)
    x[x[n]]
  }
  pval <- apply(pval, 1, getMin)
  beta <- apply(beta, 1, getMin)
  tmp$pval <- pval
  tmp$beta <- beta
  tmp <- tmp[tmp$pval > 0,]
  tmp$mod <- pvalMod[wmin]
  or <- order(tmp$pval)
  
  writeWorksheetToFile(file=filename, sheet=sheetname, data=tmp[or[1:n], ])
}

#' Paste results from SNPtestv2 files to one endpoint & get interesting variables
#' 
#'  @param path The path to the result files
#'  @param ep   The name of the endpoint
#'  @param chr  The Chromosome numbers of the different locations of the SNPs
getPValues <- function(path, ep, chr=NULL, hwe=FALSE, method="thresh") {
  library(stringr)
  mod <- c("add", "dom", "rec")
  files <- dir(path)
  # Lade Dateien & füge diese in ein Data.Frame zusammen
  n <- length(files)
  for (i in 1:n) {
    data <- read.csv(paste(path, files[i], sep=""), sep="", header=TRUE)
    # Filtere p-Werte
    dat <- data[, c(1:2, 4:6, 10:13, 18:19, 20)]
    for (j in 1:length(mod)) {
      pvalNam <- paste0(ep, "_frequentist_", mod[j])
      idN <- which(str_detect(names(data), pvalNam))
      idP <- which(str_detect(names(data), "pvalue"))
      id <- intersect(idN, idP)
      tmp <- data.frame(pval=data[, id], beta=data[, id + 1])
      names(tmp) <- c(mod[j], paste(mod[j], "beta"))
      dat <- cbind(dat, tmp)
    }
    
    if (is.null(chr)) {
      dat$Chr <- i
    } else {
      dat$Chr <- chr[i] 
    }
    if (i==1) {
      result <- dat
    } else {
      result <- rbind(result, dat)
    }
  }
  #filtere HWE
  if (hwe) {
    cat("HWE <= 5%:", paste(round(sum(result$cohort_1_hwe <= 0.05, na.rm=TRUE) * 100 / nrow(result), 2), "%"))
    id <- which( result$cohort_1_hwe <= 0.05)
    result <- result[-id, ]
  }
  
  return(result)
}

FreDiaRule <- function(x) {
  2 * IQR(x, na.rm=T) * length(x)^(-1/3) * 0.25 # Freedman-Diaconis-Regel 
}

#' Boxplots with dotplots as estimation of the density
#' 
#'  @param data data.frame
#'  @param x  SNP allels
#'  @param y  endpoint
#'  @param title
#'  @param xtitle
#'  @param ytitle
ggBox <- function(data, id, y, title, xtitle="", ytitle="") {
  require(ggplot2)
  h <- 3 * IQR(y, na.rm=T) * nrow(data)^(-1/3) * 0.25 # Freedman-Diaconis-Regel
  tmp <- na.omit(data.frame(x=data[, id], y=y))
  tmp$gg <- "steelblue"
  ng <- c()
  for(i in 1:nlevels(tmp$x)) {
    nl <- sum(tmp$x == levels(tmp$x)[i])
    levels(tmp$x)[i] <- paste(levels(tmp$x)[i], "\n (n = ", nl, ")", sep="")  
    ng <- c(ng, nl)
  }
  
  # h <- ifelse(sum(ng < 3) > 0, 0.25 * h, h)
  p <- ggplot(tmp, aes(x=x, y=y)) +
        ggtitle(title) + 
        xlab(paste("\n", xtitle, sep="")) + ylab(paste(ytitle, "\n", sep="")) +
        geom_dotplot(aes(colour=gg, fill=x), binaxis="y", method="histodot", binwidth=h, stackdir = "centerwhole") +
    scale_fill_stata() +
    scale_colour_manual(values="black") +
    geom_boxplot(alpha=0.7) +
    theme(legend.position="none")  
  p
}


getGeno <- function(snpNam, imp, resp) {
  require(car)
  rssample <- function(x) {
    n <- length(x)
    id <- seq(1, n, by=3)
    gen <- c()
    for (i in 1:length(id)) {
      s <- sum(x[id[i]:(id[i]+2)] > 0.4)
      if (s > 0) {
        if(sum(is.na(x)) == 0) {
          gen <- c(gen, which.max(x[id[i]:(id[i]+2)]))
          # gen <- c(gen, sample(0:2, 1 ,prob=x[id[i]:(id[i]+2)]))
        } else {
          gen <- c(gen, NA)
        }
      } else {
        gen <- c(gen, NA)
      }
    }
    gen
  }
  
  impdat <- data.frame(resp=resp)
  snps <- data.frame(NULL)
  for (nam in snpNam) {
    id <- which(as.character(imp[, 2]) == nam)
    x <- imp[id, 6:ncol(imp)]
    x <- as.matrix(x)
    rownames(x) <- NULL
    colnames(x) <- NULL
    snp <- apply(x, 1, rssample)
    tmp <- ifelse(snp == 1, paste(imp[id, 4], imp[id, 4], sep=""), ifelse(snp == 2, paste(imp[id, 4], imp[id, 5], sep=""), paste(imp[id, 5], imp[id, 5], sep="")))
    t <- data.frame(nam=factor(tmp))
    names(t) <- c(nam)
    impdat <- cbind(impdat, t)
  }

  impdat
}


plotBWImp <- function(impDat, resp, respNam, snpNam, pdfNam, title, yrespNam) {
  require(cairoDevice)
  dat <- getGeno(snpNam, impDat, resp)
  Cairo_pdf(pdfNam, pointsize=9, width=10, height=10)
  s <- seq(2, ncol(dat))
  for (i in s) {
    p <- ggBox(dat, id=i, y=respNam, title=title, xtitle=snpNam[i-1], ytitle=paste("log(", yrespNam, ")", sep=""))
    print(p)
  }
  dev.off()
}
